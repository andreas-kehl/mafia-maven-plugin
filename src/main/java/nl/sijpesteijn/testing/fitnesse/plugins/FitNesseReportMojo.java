package nl.sijpesteijn.testing.fitnesse.plugins;

import java.io.File;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;

import nl.sijpesteijn.testing.fitnesse.plugins.managers.ReporterPluginManager;
import nl.sijpesteijn.testing.fitnesse.plugins.managers.RunnerPluginManager;
import nl.sijpesteijn.testing.fitnesse.plugins.pluginconfigs.ReporterPluginConfig;
import nl.sijpesteijn.testing.fitnesse.plugins.pluginconfigs.RunnerPluginConfig;
import nl.sijpesteijn.testing.fitnesse.plugins.utils.MavenUtils;

import org.apache.maven.doxia.siterenderer.Renderer;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProject;
import org.apache.maven.reporting.AbstractMavenReport;
import org.apache.maven.reporting.MavenReportException;
import org.codehaus.plexus.util.xml.Xpp3Dom;

/**
 * This mojo will collect the test results from the run tests.
 * 
 * @phase site
 * @goal report
 */
public class FitNesseReportMojo extends AbstractMavenReport {
	public static final String OUTPUT_NAME = "fitnesse";

	/**
	 * FitNesse output directory.
	 * 
	 * @parameter expression="${project.reporting.outputDirectory}"
	 * @required
	 * @readonly
	 */
	private String outputDirectory;

	/**
	 * @parameter expression="${project}"
	 * @required
	 * @readonly
	 */
	private MavenProject project;

	/**
	 * @component
	 * @required
	 * @readonly
	 */
	private Renderer siteRenderer;

	/**
	 * Location of the local repository.
	 * <p>
	 * Note: This is passed by Maven and must not be configured by the user.
	 * </p>
	 * 
	 * @parameter expression="${settings.localRepository}"
	 * @readonly
	 * @required
	 */
	private String repositoryDirectory;

	/**
	 * The directory where the FitNesse report were generated by the runner mojo
	 * 
	 * @parameter expression="${report.mafiaTestResultsDirectory}"
	 *            default-value="mafiaTestResults"
	 * @required
	 */
	private String mafiaTestResultsDirectory;

	/**
	 * Location of the wiki root directory.
	 * 
	 * @parameter expression="${report.wikiRoot}" default-value="${basedir}"
	 * @required
	 */
	private String wikiRoot;

	/**
	 * List of test to be run.
	 * 
	 * @parameter expression="${report.tests}"
	 */
	private List<String> tests;

	/**
	 * List of suites to be run.
	 * 
	 * @parameter expression="${report.suites}"
	 */
	private List<String> suites;

	/**
	 * Name of the suite page name.
	 * 
	 * @parameter expression="${report.suitePageName}"
	 */
	private String suitePageName;

	/**
	 * Suite filter to run in the specified suite (=suitePageName).
	 * 
	 * @parameter expression="${report.suiteFilter}"
	 */
	private String suiteFilter;

	/**
	 * Should the test be run before collecting the report.
	 * 
	 * @parameter expression="${report.runTests}" default-value="true"
	 */
	private boolean runTests;

	/**
	 * The location for FitNesse to place the log files.
	 * 
	 * @parameter expression="${report.logDirectory}"
	 *            default-value="${basedir}/log/"
	 */
	private String logDirectory;

	private MavenUtils mavenUtils;

	private Xpp3Dom configuration;

	/**
	 * 
	 * {@inheritDoc}
	 */
	@Override
	protected void executeReport(final Locale locale) throws MavenReportException {
		try {
			mavenUtils = new MavenUtils(this.project);
			configuration = mavenUtils.getPluginConfiguration("nl.sijpesteijn.testing.fitnesse.plugins",
					"mafia-maven-plugin", "test");

			if (runTests) {
				runTestMojo();
			}

			final ReporterPluginConfig reporterPluginConfig = getPluginConfig(locale);
			getLog().debug("Report config: " + reporterPluginConfig.toString());
			final ReporterPluginManager manager = new ReporterPluginManager(reporterPluginConfig);
			manager.run();
		} catch (final MojoExecutionException e) {
			throw new MavenReportException("" + e);
		} catch (final MojoFailureException e) {
			throw new MavenReportException("" + e);
		}
		getLog().info("Finished FitNesse reporting...");
	}

	private void runTestMojo() throws MojoExecutionException, MojoFailureException {
		final RunnerPluginConfig config = new RunnerPluginConfig(wikiRoot, getNameRootPage(), repositoryDirectory,
				logDirectory, 9091, 0, getLog(), mafiaTestResultsDirectory, false, false, false, false, tests, suites,
				suiteFilter, suitePageName);
		getLog().debug("Runner config: " + config.toString());
		new RunnerPluginManager(config).run();
	}

	private int getPort() {
		final String portStr = mavenUtils.getStringValueFromConfiguration(configuration, "port", "9091");
		return Integer.parseInt(portStr);
	}

	private String getNameRootPage() {
		return mavenUtils.getStringValueFromConfiguration(configuration, "nameRootPage", "FitNesseRoot");
	}

	/**
	 * Collect the plugin configuration settings
	 * 
	 * @param locale
	 * 
	 * @return {@link nl.sijpesteijn.testing.fitnesse.plugins.pluginconfigs.ReporterPluginConfig}
	 * @throws MojoExecutionException
	 */
	private ReporterPluginConfig getPluginConfig(final Locale locale) throws MojoExecutionException {
		return new ReporterPluginConfig(wikiRoot, getNameRootPage(), repositoryDirectory, logDirectory, getPort(), 0,
				getLog(), outputDirectory, OUTPUT_NAME, mafiaTestResultsDirectory, getSink(), getBundle(locale),
				getTests(), getSuites(), getSuiteFilter(), getSuitePageName());
	}

	private String getSuitePageName() {
		if (this.suitePageName != null && !this.suitePageName.equals("")) {
			return this.suitePageName;
		}
		return mavenUtils.getStringValueFromConfiguration(configuration, "suitePageName", null);
	}

	private String getSuiteFilter() {
		if (this.suiteFilter != null && !this.suiteFilter.equals("")) {
			return this.suiteFilter;
		}
		return mavenUtils.getStringValueFromConfiguration(configuration, "suiteFilter", null);
	}

	private List<String> getSuites() {
		if (this.suites != null && !this.suites.isEmpty()) {
			return this.suites;
		} else {
			return readFromConfiguration("suites");
		}
	}

	private List<String> getTests() {
		if (this.tests != null && !this.tests.isEmpty()) {
			return this.tests;
		} else {
			return readFromConfiguration("tests");
		}
	}

	private List<String> readFromConfiguration(final String string) {
		return mavenUtils.getStringArrayFromConfiguration(configuration, string);
	}

	private ResourceBundle getBundle(final Locale locale) {
		return ResourceBundle.getBundle("mafia-report", locale, FitNesseReportMojo.class.getClassLoader());
	}

	/**
	 * @return Get the report output directory. Passed by Maven.
	 */
	@Override
	protected String getOutputDirectory() {
		return new File(outputDirectory).getAbsolutePath();
	}

	/**
	 * @return Get the mavenproject. Passed by Maven
	 */
	@Override
	public MavenProject getProject() {
		return this.project;
	}

	/**
	 * @return Get the site renderer. Passed by Maven.
	 */
	@Override
	protected Renderer getSiteRenderer() {
		return this.siteRenderer;
	}

	/**
	 * Get the description for this report mojo.
	 */
	@Override
	public String getDescription(final Locale arg0) {
		return "Maven mafia plugin - reporting: Generate a report of the fitnessetests that have run";
	}

	/**
	 * Get the name for this report mojo.
	 */
	@Override
	public String getName(final Locale arg0) {
		return "Mafia Report";
	}

	/**
	 * Get the output name for this report mojo.
	 * 
	 * @return the output name of this report.
	 */
	@Override
	public String getOutputName() {
		return OUTPUT_NAME;
	}

	@Override
	public boolean isExternalReport() {
		return false;
	}
}
